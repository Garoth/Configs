# Custom Javascript / Common Editor Snippets

snippet for "for (...) {...} (counting up)" b
for (let ${1:i} = 0; $1 < ${2:foo.length}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet component "inserts a react component file template" b
import React from 'react';
import PropTypes from 'prop-types';

import s from './index.less';

class ${1:`!p snip.rv = path.split("/")[len(path.split("/"))-2]`} extends React.PureComponent {
    constructor(props) {
		super(props);
	}

	render() {
		return null;
	}
}

$1.propTypes = {$2
};

export default $1;
endsnippet

snippet component-drizzle "inserts a drizzled react component file template" b
import React from 'react';
import PropTypes from 'prop-types';
import { DrizzleContext } from 'drizzle-react';

import s from './index.less';

class ${1:`!p snip.rv = path.split("/")[len(path.split("/"))-2]`} extends React.PureComponent {
    constructor(props) {
		super(props);
	}

	render() {
		return null;
	}
}

$1.propTypes = {
    web3: PropTypes.object,
    account: PropTypes.string,$2
};

export default (params) => (
    <DrizzleContext.Consumer>
        { drizzleContext => {
            if (!drizzleContext.initialized) {
				return null;
            }

            let account = null;
            try {
                account = drizzleContext.drizzleState.accounts[0];
            } catch (e) {}

            return <$1 { ...params }
                web3={ drizzleContext.drizzle.web3 }
                account={ account } />
        }}
    </DrizzleContext.Consumer>
);
endsnippet

snippet component-functional "inserts a functional react component template" b
import React from 'react';
import PropTypes from 'prop-types';

import s from './index.less';

// Functional Component -- no lifecycle methods
const ${1:`!p snip.rv = path.split("/")[len(path.split("/"))-2]`} = ({ ${2} }) => {
    return <div>
    </div>;
};

$1.propTypes = {$2
};

export default $1;
endsnippet

snippet todo "inserts a todo comment for the current date" b
// TODO:a.edell:`/bin/date +"%Y-%m-%d"` $1
endsnippet

snippet fixme "inserts a fixme comment for the current date" b
// FIXME:a.edell:`/bin/date +"%Y-%m-%d"` $1
endsnippet

snippet note "inserts a note comment for the current date" b
// NOTE:a.edell:`/bin/date +"%Y-%m-%d"` $1
endsnippet

snippet cl "console.log" b
console.log('${1:value});
endsnippet

snippet if "if statement" b
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet const "One line constant declaration" b
/** @const */ var $1 = $2;
endsnippet

snippet each "goog for each" b
goog.array.forEach($1, function($2) {
	${VISUAL}$0
});
endsnippet

snippet "(\w*)\+class" "foo+class -> adds a class to foo" r
goog.dom.classes.add(`!p snip.rv = match.group(1)`, $0);
endsnippet

snippet "(\w*)\-class" "foo-class -> removes a class from foo" r
goog.dom.classes.remove(`!p snip.rv = match.group(1)`, $0);
endsnippet

snippet "(\w*)\?class" "foo?class -> checks if foo has class" r
goog.dom.classes.contains(`!p snip.rv = match.group(1)`, $0);
endsnippet

snippet "(\w*)\+style" "foo+style -> adds a style to foo" r
goog.style.setStyle(`!p snip.rv = match.group(1)`, '$1', '$2');
endsnippet

snippet "(\w*)\-style" "foo-style -> removes a style from foo" r
goog.style.setStyle(`!p snip.rv = match.group(1)`, '$1', '');
endsnippet

snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]
 
if t[1] != "":
	snip.rv = "/**"
	snip += " * " + t[1] + " description here"
	snip += " * "
	for argument in arguments:
		snip += " * @param {} " + argument
	snip += ' */'
	snip += ''
else:
	snip.rv = ''

`${1} = function(${2}) {
	${0:${VISUAL}}
};
endsnippet
